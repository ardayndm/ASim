//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Project/InputActionsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionsMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionsMap"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""4978de31-ad92-42eb-b2a5-a9ccef229bcf"",
            ""actions"": [
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""54bed4a1-5a8e-4a41-9638-6aba2ef853d3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScrollPress"",
                    ""type"": ""Button"",
                    ""id"": ""89c08f17-0d48-4bbe-9aef-e2cede849872"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4211afb3-20fa-402f-9815-a61e530cfa0c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7d8d12cf-2a96-4d2c-9b3c-e1a0cd768a46"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4e06492f-d2f5-4182-8c23-a147ebf6bf0c"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""277e7d88-115b-4dc9-9dc5-ed59ba7d98bb"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keys"",
            ""id"": ""3df29773-0faa-47fa-ac4e-6dfe2e6e909d"",
            ""actions"": [
                {
                    ""name"": ""LShift"",
                    ""type"": ""Button"",
                    ""id"": ""2ec44e0d-4b9c-4f32-afd7-d37b9b85b610"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25d63eeb-b09d-4358-84f2-aae58a8e53ba"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseScroll = m_Mouse.FindAction("MouseScroll", throwIfNotFound: true);
        m_Mouse_MouseScrollPress = m_Mouse.FindAction("MouseScrollPress", throwIfNotFound: true);
        // Keys
        m_Keys = asset.FindActionMap("Keys", throwIfNotFound: true);
        m_Keys_LShift = m_Keys.FindAction("LShift", throwIfNotFound: true);
    }

    ~@InputActionsMap()
    {
        UnityEngine.Debug.Assert(!m_Mouse.enabled, "This will cause a leak and performance issues, InputActionsMap.Mouse.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keys.enabled, "This will cause a leak and performance issues, InputActionsMap.Keys.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_MouseScroll;
    private readonly InputAction m_Mouse_MouseScrollPress;
    public struct MouseActions
    {
        private @InputActionsMap m_Wrapper;
        public MouseActions(@InputActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseScroll => m_Wrapper.m_Mouse_MouseScroll;
        public InputAction @MouseScrollPress => m_Wrapper.m_Mouse_MouseScrollPress;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
            @MouseScrollPress.started += instance.OnMouseScrollPress;
            @MouseScrollPress.performed += instance.OnMouseScrollPress;
            @MouseScrollPress.canceled += instance.OnMouseScrollPress;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
            @MouseScrollPress.started -= instance.OnMouseScrollPress;
            @MouseScrollPress.performed -= instance.OnMouseScrollPress;
            @MouseScrollPress.canceled -= instance.OnMouseScrollPress;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Keys
    private readonly InputActionMap m_Keys;
    private List<IKeysActions> m_KeysActionsCallbackInterfaces = new List<IKeysActions>();
    private readonly InputAction m_Keys_LShift;
    public struct KeysActions
    {
        private @InputActionsMap m_Wrapper;
        public KeysActions(@InputActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @LShift => m_Wrapper.m_Keys_LShift;
        public InputActionMap Get() { return m_Wrapper.m_Keys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeysActions set) { return set.Get(); }
        public void AddCallbacks(IKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_KeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeysActionsCallbackInterfaces.Add(instance);
            @LShift.started += instance.OnLShift;
            @LShift.performed += instance.OnLShift;
            @LShift.canceled += instance.OnLShift;
        }

        private void UnregisterCallbacks(IKeysActions instance)
        {
            @LShift.started -= instance.OnLShift;
            @LShift.performed -= instance.OnLShift;
            @LShift.canceled -= instance.OnLShift;
        }

        public void RemoveCallbacks(IKeysActions instance)
        {
            if (m_Wrapper.m_KeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_KeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeysActions @Keys => new KeysActions(this);
    public interface IMouseActions
    {
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnMouseScrollPress(InputAction.CallbackContext context);
    }
    public interface IKeysActions
    {
        void OnLShift(InputAction.CallbackContext context);
    }
}
